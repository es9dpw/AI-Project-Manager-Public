#This is a version of the system which does not contain an API key, replace the placeholder_key with an actual API key for proper functionality

import os
import google.generativeai as genai
import json
from pydantic import BaseModel, TypeAdapter
from tkinter import *

genai.configure(api_key="placeholder_key") #replace placeholder_key with your real API key here
model = genai.GenerativeModel("gemini-1.5-flash")

def AIprompt(task, weeks, groupSize):
    prompt = task +""".Take this and break it down into smaller tasks to be done in """+weeks+""" weeks. Please provide this in the following format
    'Week number': int, 'task': str
    Do not attempt to provide an output outside of this specific format"""
    response = model.generate_content(
        contents=prompt,
        )
    #add a comma after "task:str if splitting doesnt work(if the week is fused with the task)"
    prompt2 = response.text +"""".Take this list and break down each task further from each week in this list so it can be done by a group of """+groupSize+""" people and multiple tasks are being done each week if possible.
    Please provide this in the following format.
    'Week number': int, 'Group member': int, 'task': str,
    Do not attempt to provide an output outside of this specific format.
    Please provide this in week order and not group member order.
    remove the spaces between each value and replaces the commas that seperate these value with pluses.
    do not group the members together.
    try to fill out all week and group member combinations if possible.
    do not create a response using a week number and group number combination that has been used before.
    Each week can have multiple tasks done by different group members.
    each week and group member combinitation should be as close to being unique as possible.
    add a  --- after the task,connecting to the task text itself.
    remove 'Week number','Group member' and 'task' from the output.
    keep all the output in one line."""
    response = model.generate_content(
        contents=prompt2,
        )
    
    print(response.text)
    ##This part actually splits the ai response into a list with each task
    stringResponse = str(response.text)
    entireResponse = stringResponse.split("---")

    return entireResponse



#Creating initital window
root = Tk()
root.title("AI Project Manager")
root.geometry('1280x240')

#Creating label and text field for the task
taskLbl = Label(root, width=25, height=2, text = "Enter Task Info: ")
taskLbl.grid(column=0, row=0)
taskTxt = Entry(root, width=180)
taskTxt.grid(sticky="W", column=1, row=0)

#Creating label and text field for the amount of weeks
weeksLbl = Label(root, width=25, height=2, text = "Enter amount of weeks: ")
weeksLbl.grid(column=0, row=1)
weeksTxt = Entry(root, width=10)
weeksTxt.grid(sticky="W", column=1, row=1)

#Creating label and text field for the group size
groupSizeLbl = Label(root, width=25, height=2, text = "Enter the size of your group: ")
groupSizeLbl.grid(column=0, row=2)
groupSizeTxt = Entry(root, width=10)
groupSizeTxt.grid(sticky="W", column=1, row=2)

#Called when the button is clicked
def clicked():
    #Getting values entered to send to the AI
    task=taskTxt.get()
    weeks=weeksTxt.get()
    groupSize=groupSizeTxt.get()
    entireResponse = AIprompt(task, weeks, groupSize)
    print(entireResponse)
    root.destroy()
    #Creating Response Window
    responseWindow = Tk()
    responseWindow.title("AI Project Manager")
    responseWindow.geometry('1280x720')
    
    #Creating The headers for the grid
    AIlbl = Label(responseWindow, width=10, height=2, relief = "solid", bg="Black")
    AIlbl.grid(column=0, row=0)
    for i in range(int(weeks)):
        AIlbl = Label(responseWindow, width=15, height=2, relief = "solid", bg="gray32", fg="White", text="Week " + str(i+1))
        AIlbl.grid(column=i+1, row=0)
    for j in range(int(groupSize)):
        AIlbl = Label(responseWindow, width=10, height=10, relief = "solid", bg="gray32", fg="White", text="Person " + str(j+1))
        AIlbl.grid(column=0, row=j+1)
    
    #Filling in the grid with the tasks generated by the AI
    for i in range(len(entireResponse)):
        individualTask = entireResponse[i].split("+")
        if(len(individualTask)==3): #check to ensure the AI has output the result correctly, otherwise an exception could occurr, or the output wouldn't be as intended
            if(individualTask[2]!=""): #checks if the task has actually been filled in by the AI
                AIlbl = Label(responseWindow, relief = "solid", width=15, height=10, text=individualTask[2], wraplength=100)
            else:
                AIlbl = Label(responseWindow, relief = "solid", width=15, height=10, text="N/A", wraplength=100)
            AIlbl.grid(column=int(individualTask[0]), row=int(individualTask[1]))

    
#Creating button to send info to the AI
btn = Button(root, text = "Generate AI Breakdown" , fg = "black", command=clicked)
btn.grid(column=0, row=3)

root.mainloop()
